@page "/files"

@using FileManager.Application.DTOs
@using FileManager.Application.Interfaces
@using Microsoft.AspNetCore.Authorization
@using System.Text

@inject IFileService FileService
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Files</PageTitle>

<h3>📂 فایل‌های من</h3>
@if (files == null)
{
    <p>در حال بارگذاری فایل‌ها...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>نام فایل</th>
                <th>تاریخ</th>
                <th>دانلود</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var f in files)
            {
                <tr>
                    <td>
                        @if (f.IsImage && f.ImageContent != null)
                        {
                            <img src="@GetImageDataUrl(f.ImageContent, f.FileName)" alt="@f.FileName"
                                style="max-height: 100px; max-width: 200px;" />
                            <br />
                            @f.FileName
                        }
                        else
                        {
                            <span class="file-icon">@GetFileIcon(f.FileName)</span>
                            <span class="ms-2">@f.FileName</span>
                        }
                    </td>
                    <td>@f.UploadedAt.ToString("yyyy-MM-dd")</td>
                    <td>
                        <a href="/download/@f.Id/@(Uri.EscapeDataString(NavigationManager.Uri))">📥</a>
                        @* <button onclick="@DownloadFile(@f.Id)">📥</button> *@
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<FileDto>? files;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthProvider.GetAuthenticationStateAsync()).User;
        if (user.Identity?.IsAuthenticated == true)
        {
            files = await FileService.GetFilesForUserAsync(user.Identity.Name!);
        }
    }

    private string GetImageDataUrl(byte[] imageContent, string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLowerInvariant();
        var mimeType = extension switch
        {
            ".jpg" or ".jpeg" => "image/jpeg",
            ".png" => "image/png",
            ".gif" => "image/gif",
            ".bmp" => "image/bmp",
            ".webp" => "image/webp",
            _ => "application/octet-stream"
        };

        return $"data:{mimeType};base64,{Convert.ToBase64String(imageContent)}";
    }

    private string GetFileIcon(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLowerInvariant();
        return extension switch
        {
            ".pdf" => "📄",
            ".doc" or ".docx" => "📝",
            ".xls" or ".xlsx" => "📊",
            ".ppt" or ".pptx" => "📽️",
            ".txt" => "📃",
            ".zip" or ".rar" or ".7z" => "🗜️",
            ".mp3" or ".wav" or ".ogg" => "🎵",
            ".mp4" or ".avi" or ".mov" => "🎬",
            _ => "📎"
        };
    }


    private async Task DownloadFile(Guid fileId)
    {
        try
        {
            var user = (await AuthProvider.GetAuthenticationStateAsync()).User;
            if (user.Identity?.IsAuthenticated == true)
            {
                var (content, fileName) = await FileService.DownloadAsync(fileId, user.Identity.Name!);
                await JS.InvokeVoidAsync("downloadFileFromStream", content, fileName);
            }
        }
        catch (Exception ex)
        {
            // Handle error appropriately
            Console.WriteLine($"Error downloading file: {ex.Message}");
        }
    }
}