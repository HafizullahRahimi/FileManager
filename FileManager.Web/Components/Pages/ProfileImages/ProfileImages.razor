@page "/ProfileImages"

@using System.Text
@using FileManager.Application.FileServices.Modes
@using FileManager.Application.ProfileImageServices
@using FileManager.Application.ProfileImageServices.Models
@using FileManager.Domain.ProfileImages
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@inject IProfileImageService ProfileImageService
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS

<PageTitle>Files</PageTitle>

<h3>ProfileImages</h3>
@if (images == null)
{
    <p>Ø¯Ø± Ø­Ø§Ù„ Ø¨Ø§Ø±Ú¯Ø°Ø§Ø±ÛŒ Ø¹Ú©Ø³ â€ŒÙ‡Ø§...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Ù†Ø§Ù…</th>
                <th>Ø¹Ú©Ø³</th>
                <th>ØªØ§Ø±ÛŒØ®</th>
                <th>Ø¯Ø§Ù†Ù„ÙˆØ¯</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var image in images)
            {
                <tr>
                    <td>
                        @image.Name
                    </td>
                    <td>
                        <img src="@image.Url" alt="@image.Name"
                             style="max-height: 100px; max-width: 200px;" />
                        <br />
                    </td>

                    <td>
                        @image.CreatedUtcDate.ToString("yyyy-MM-dd HH:mm:ss")
                    </td>
                    <td>
                        <button class="btn btn-link" @onclick="() => DownloadFileAsync(image.Id)">ðŸ“¥</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ProfileImageDto>? images;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthProvider.GetAuthenticationStateAsync()).User;
        if (user.Identity?.IsAuthenticated == true)
        {
            images = await ProfileImageService.GetProfileImagesForUserAsync(user.Identity.Name!, CancellationToken.None);
        }
    }

    private async Task DownloadFileAsync(Guid id)
    {
        try
        {
            (byte[] content, string fileName) = await ProfileImageService.DownloadAsync(id, CancellationToken.None);
            if (fileName == string.Empty)
            {
                // Handle case where file data is not found
                Console.WriteLine("File not found.");
                return;
            }
            await JS.InvokeVoidAsync("downloadFileFromStream", content, fileName);
        }
        catch (Exception ex)
        {
            // Handle error appropriately
            Console.WriteLine($"Error downloading file: {ex.Message}");
        }
    }
}